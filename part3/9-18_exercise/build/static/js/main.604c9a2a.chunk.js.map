{"version":3,"sources":["service/service.js","App.js","index.js"],"names":["baseUrl","axios","get","then","request","data","newObj","post","id","delete","put","Notification","message","boIf","className","PersonsDisplay","personsFil","personAll","setPersons","map","person","key","name","number","onClick","window","confirm","personService","filter","n","deleteFun","Filter","filterInputChange","value","onChange","PersonForm","addPerson","newName","nameInputChange","newNumber","numberInputChange","onSubmit","type","App","useState","persons","setNewName","setNewNumber","setFilter","setMessage","setBoIf","useEffect","personsToShow","indexOf","event","target","preventDefault","personOj","findIndex","arr","toString","returnPerson","setTimeout","console","log","concat","catch","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.604c9a2a.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((request) => request.data);\n};\n\nconst creat = (newObj) => {\n  const request = axios.post(baseUrl, newObj);\n  return request.then((request) => request.data);\n};\n\nconst dele = (id) => {\n  axios.delete(`${baseUrl}/${id}`);\n};\n\nconst update = (id,newObj) =>{\n    const request = axios.put(`${baseUrl}/${id}`,newObj)\n    return request.then(request=>request.data)\n}\n\nexport default {\n  getAll,\n  creat,\n  dele,\n  update\n};\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./service/service\";\nimport \"./index.css\";\n// 成功提示\nconst Notification = ({ message, boIf }) => {\n  if (message === null) {\n    return null;\n  } else if (boIf === true) {\n    return <div className=\"message success\">{message}</div>;\n  } else {\n    return <div className=\"message error\">{message}</div>;\n  }\n};\nconst ErrNotification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"success\">{message}</div>;\n};\n// 删除事件\nconst deleteFun = (person, personAll, setPersons) => {\n  // 弹出对话框\n  if (window.confirm(`Delete ${person.name} ?`)) {\n    // 如用户确定发送delete请求\n    personService.dele(person.id);\n    // 更新状态，过滤删除项\n    setPersons(personAll.filter((n) => n.id !== person.id));\n  }\n};\n// 联系人信息显示组件\nconst PersonsDisplay = ({ personsFil, personAll, setPersons }) =>\n  // 显示联系人信息及删除按钮\n  personsFil.map((person) => (\n    <div key={person.id}>\n      <span>{person.name}</span>\n      <span> {person.number}</span>\n      <button onClick={() => deleteFun(person, personAll, setPersons)}>\n        delete\n      </button>\n    </div>\n  ));\n// 过滤组件\nconst Filter = ({ filter, filterInputChange }) => (\n  <div>\n    filter shown with: <input value={filter} onChange={filterInputChange} />\n  </div>\n);\n\n// 添加通讯录表单\nconst PersonForm = ({\n  addPerson,\n  newName,\n  nameInputChange,\n  newNumber,\n  numberInputChange,\n}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={nameInputChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={numberInputChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [boIf, setBoIf] = useState(true);\n  // 获取通讯录，更新状态\n  useEffect(() => {\n    personService.getAll().then((personAll) => setPersons(personAll));\n  }, []);\n  // 如过滤输入框有内容则过滤掉不含有过滤输入框内容的联系人信息\n  const personsToShow = !filter\n    ? persons\n    : persons.filter((person) => person.name.indexOf(filter) !== -1);\n  // 添加联系人事件\n  const addPerson = (event) => {\n    event.preventDefault();\n    // 创建新对象\n    const personOj = { name: newName, number: newNumber };\n    // 如果原有联系人任意一项的姓名没有含新建姓名\n    if (\n      persons.findIndex((arr) => arr.name.toString() === newName.toString()) ===\n      -1\n      // 发送创建请求，更新状态\n    ) {\n      personService.creat(personOj).then((returnPerson) => {\n        setBoIf(true);\n        setMessage(`${returnPerson.name} phone book created`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n        console.log(returnPerson);\n        setPersons(persons.concat(returnPerson));\n      });\n      // 如果含有新建姓名\n    } else {\n      // 弹出选择对话框，询问是否更新号码\n      if (\n        window.confirm(\n          `${newName} is already added to phoneBook, replace the old number with a new one?`\n        )\n        // 点击确定后\n      ) {\n        // 新建含有原先新建对象的对象，更新对象中号码\n        const newObj = { ...personOj, number: newNumber };\n        // 发送更新请求\n        personService\n          .update(\n            persons.filter((n) => n.name.toString() === newName.toString())[0]\n              .id,\n            newObj\n          )\n          .then((returnPerson) => {\n            setBoIf(true);\n            setMessage(`${returnPerson.name} phone book edited`);\n            // 更新状态\n            setPersons(\n              persons.map((person) =>\n                person.id !== returnPerson.id ? person : returnPerson\n              )\n            );\n          })\n          .catch((error) => {\n            setBoIf(false);\n            setMessage(\n              `Information of ${newObj.name} has already been removed from server`\n            );\n            setTimeout(() => {\n              setMessage(null);\n            }, 3000);\n            console.log(newObj);\n            setPersons(persons.filter((n) => n.name !== newObj.name));\n          });\n      }\n    }\n    // 初始化\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n  // input同步\n  const nameInputChange = (event) => {\n    setNewName(event.target.value);\n  };\n  const numberInputChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n  const filterInputChange = (event) => {\n    setFilter(event.target.value);\n  };\n  return (\n    <div>\n      <h1>PhoneBook</h1>\n      <Notification message={message} boIf={boIf} />\n      <Filter filter={filter} filterInputChange={filterInputChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        newNumber={newNumber}\n        nameInputChange={nameInputChange}\n        numberInputChange={numberInputChange}\n      />\n      <h2>Numbers</h2>\n      <PersonsDisplay\n        personsFil={personsToShow}\n        personAll={persons}\n        setPersons={setPersons}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}